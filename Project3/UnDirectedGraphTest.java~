import junit.framework.TestCase;
import java.util.*;

public class UnDirectedGraphTest extends TestCase {
  
  // tests the adding of a node
  public void testAddNode() {
    // create graph
    UnDirectedGraph<Integer,Integer> graph = new UnDirectedGraph<Integer,Integer>();
    
    // check size
    assertTrue(graph.size() == 0);
    
    // add node
    graph.addNode(5,4);
    
    // check size
    assertTrue(graph.size() == 1);
    
    // check element
    assertTrue(graph.getVertex(5).getElement() == 4);
    
    // add node
    graph.addNode(9,3);
    graph.addNode(7,2);
    graph.addNode(2,1);
    
    // check size
    assertTrue(graph.size() == 4);
    
    // check element
    assertTrue(graph.getVertex(9).getElement() == 3);
    assertTrue(graph.getVertex(7).getElement() == 2);
    assertTrue(graph.getVertex(2).getElement() == 1);
  }
  
  // test edges
  public void testAddEdge(){
    // create graph
    UnDirectedGraph<Integer,Integer> graph = new UnDirectedGraph<Integer,Integer>();
    
    // add nodes
    graph.addNode(5,4);
    graph.addNode(2,6);
    
    // add edge 
    graph.addEdge(5,2,9);
    
    // check element
    assertTrue(graph.getVertex(5).getList().peek().getDest().getElement() == 6);
    assertTrue(graph.getVertex(2).getList().peek().getDest().getElement() == 4);
  }
  
  // test shortest path
  public void testShortestPath(){
    // Try with the larger number of nodes being shortest
    // create nodes
    UnDirectedGraph<Integer,Integer> graph = new UnDirectedGraph<Integer,Integer>();
    
    // add nodes
    graph.addNode(1,1);
    graph.addNode(2,2);
    graph.addNode(3,3);
    
    // add edges
    graph.addEdge(1,2,2);
    graph.addEdge(2,3,3);
    graph.addEdge(1,3,11);
    
    // find shortest path
    ArrayList<Integer> al = graph.findShortestPath(1,3);
    
    // test as expected
    assertTrue(al.size() == 3);
    
    // Now try with the smallest number of nodes being greatest
    // create nodes
    graph = new UnDirectedGraph<Integer,Integer>();
    
    // add nodes
    graph.addNode(1,1);
    graph.addNode(2,2);
    graph.addNode(3,3);
    
    // add edges
    graph.addEdge(1,2,15);
    graph.addEdge(2,3,13);
    graph.addEdge(1,3,3);
    
    // find shortest path
    al = graph.findShortestPath(1,3);
    
    // test as expected
    assertTrue(al.size() == 2);
    
    // Now try with a much bigger graph
    // create nodes
    graph = new UnDirectedGraph<Integer,Integer>();
    
    // add nodes
    graph.addNode(1,1);
    graph.addNode(2,2);
    graph.addNode(3,3);
    graph.addNode(4,4);
    graph.addNode(5,5);
    graph.addNode(6,6);
    
    // add edges
    graph.addEdge(1,2,1);
    graph.addEdge(2,3,3);
    graph.addEdge(1,3,8);
    graph.addEdge(2,4,8);
    graph.addEdge(3,4,2);
    graph.addEdge(1,6,10);
    graph.addEdge(2,6,9);
    graph.addEdge(5,6,8);
    graph.addEdge(4,5,1);
    graph.addEdge(3,5,8);
    
    // find shortest path
    al = graph.findShortestPath(1,5);
    
    // test as expected
    assertTrue(al.size() == 5);
  }
  
  // test the compareTo value
  public void testCompare(){
    // create graph
    UnDirectedGraph<Integer,Integer> graph = new UnDirectedGraph<Integer,Integer>();
    
    // add node
    graph.addNode(1,1);
    UnDirectedGraph<Integer,Integer>.UnDirectedGraphNode<Integer,Integer> n1 = graph.getVertex(1);
    
    // add paths
    UnDirectedGraph<Integer,Integer>.UnDirectedGraphPath<Integer> p1 = graph.addPath(n1,3);
    UnDirectedGraph<Integer,Integer>.UnDirectedGraphPath<Integer> p2 = graph.addPath(n1,5);
    
    // compare
    assertTrue(p1.compareTo(p2) == -1);
    assertTrue(p2.compareTo(p1) == 1);
    assertTrue(p1.compareTo(p1) == 0);
  }
  
  // test clearing all the nodes
  public void testClearAll(){
    // create nodes
    UnDirectedGraph<Integer,Integer> graph = new UnDirectedGraph<Integer,Integer>();
    
    // add nodes
    graph.addNode(1,1);
    graph.addNode(2,2);
    graph.addNode(3,3);
    
    // add edges
    graph.addEdge(1,2,2);
    graph.addEdge(2,3,3);
    graph.addEdge(1,3,11);
    
    // find shortest path
    ArrayList<Integer> al = graph.findShortestPath(1,3);
    
    // now clear
    graph.clearAll();
    
    // check
    for (int i = 1; i <= 3; i++){
      assertTrue("A node is not reset to infinity.", graph.getVertex(i).getDist() == UnDirectedGraph.INFINITY);
      assertTrue("The previous value of a node is not null.", graph.getVertex(i).getPrev() == null);
      assertTrue("The scratch value of a node is not 0.",graph.getVertex(i).getScratch() == 0);
    }
  }
  
}
