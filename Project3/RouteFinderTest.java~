import junit.framework.TestCase;
import java.util.*;
import java.io.*;

public class RouteFinderTest extends TestCase {
  private Controller c;
  private RouteFinder r;
  
  public void setUp(){
    c = new Controller("testResources.txt", "testLocations.txt", "testConnectivity.txt", "testSpecification.txt", "testNeeds.txt");
    r = new RouteFinder(c);
  }
  
  public void testGetStores() {
        
    // get stores
    LinkedList<Location> l = r.getStores();
    
    // iterate through list, summing keys
    Iterator<Location> it = l.iterator();
    int cnt = 0;
    while(it.hasNext()){
      cnt += it.next().getName();
    }
    
    //test
    assertTrue(cnt == 20+21+3);
  }
  
  public void testGetWarehouses() {
    
    // add stores and other nodes
        
    // get stores
    LinkedList<Location> l = r.getWarehouses();
    
    // iterate through list, summing keys
    Iterator<Location> it = l.iterator();
    int cnt = 0;
    while(it.hasNext()){
      cnt += it.next().getName();
    }
    
    //test
    assertTrue(cnt == 24+22+23+1);
  }
  
  public void testToQueue(){
    // get list
    LinkedList<Location> l = r.getWarehouses();
    
    // copy to queue
    LineQueueList<Location> queue = r.toQueue(l);
    
    // compare
    assertTrue("Failed checking size",l.size() == queue.size());
    
    Iterator<Location> it1 = l.iterator();
    Iterator<Location> it2 = queue.iterator();

    while (it1.hasNext() && it2.hasNext()){
      assertTrue("Failed comparing keys",it1.next().getName() == it2.next().getName());
    }
  }
  
  public void testCreateTrucks(){
    // call method
    r.createTrucks();
    
    // check that size of trucks is equal to the number of trucks per warehouse * the number of warehouses
    assertTrue(r.getRoute().size() == c.getWarehouseCount() * r.getWarehouses().size());
  }
  
  public void testGetNearestStore(){
    r.getNearestStore
  }
}
